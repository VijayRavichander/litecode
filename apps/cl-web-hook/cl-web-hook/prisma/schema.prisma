generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                  @id @default(cuid())
  email                     String                  @unique
  password                  String 
  submissions               Submission[]
  contestSubmissions        ContestSubmission[]     
  type                      String                  @default("user") 
}

model Problem {
  id                 String              @id @default(cuid())
  title              String
  description        String
  slug               String              @unique
  solved             Int                 @default(0)
  createdAt          DateTime            @default(now())
  defaultCode        DefaultCode[]
  submissions        Submission[]
  contestSubmission  ContestSubmission[]
  contestProblem     ContestProblem[]
}

model Language {
  id          Int           @id @default(autoincrement())
  name        String
  judge0Id    Int           @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model DefaultCode {
  id         String   @id @default(cuid())
  languageId Int
  problemId  String   
  code       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  problem    Problem  @relation(fields: [problemId], references: [id])
}

model Submission {
  id          String            @id @default(cuid())
  problemId   String
  userId      String
  code        String
  languageId  Int
  status      SubmissionResult  @default(PENDING)
  createdAt   DateTime          @default(now())
  problem     Problem           @relation(fields: [problemId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  testCase    TestCase[]
}

model TestCase {
  id            String               @id @default(cuid())
  judge0Token   String
  problemId     String
  memory        String
  time          String
  status        SubmissionResult     @default(PENDING)
  createdAt     DateTime             @default(now())
  submissionId  String
  submission    Submission           @relation(fields: [submissionId], references: [id])
}

enum SubmissionResult {
  ACCEPTED
  REJECTED
  PENDING
  TLE 
  COMPILATIONERROR
  RUNTIMEERROR
  INTERNALERROR
}
model Contest {
  id          String            @id @default(cuid())
  name        String      
  createdAt   DateTime          @default(now())
  startsAt    DateTime
  endsAt      DateTime 
  problems    ContestProblem[]       
}

model ContestProblem {
  id          String   @id @default(cuid())
  contestId   String
  problemId   String
  contest     Contest  @relation(fields: [contestId], references: [id])
  problem     Problem  @relation(fields: [problemId], references: [id])
}

model ContestSubmission {
  id          String            @id @default(cuid())
  judge0Token String
  languageId  Int
  problemId   String
  contestId   String
  userId      String
  code        String
  memory      Int
  time        String
  status      SubmissionResult  @default(PENDING)
  createdAt   DateTime          @default(now())
  problem     Problem           @relation(fields: [problemId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
}


